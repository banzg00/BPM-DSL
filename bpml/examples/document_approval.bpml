// Document Approval Workflow Example
// Demonstrates approval chains, escalation, and collaborative review processes

project {
    name: DocumentApprovalSystem
    description: "Flexible document approval and review workflow"
    version: "1.1"
    author: "Workflow Team"
}

// Document management entities
entity Document {
    documentId: str
    title: str
    documentType: str
    content: text
    version: str
    authorId: str
    createdDate: dateTime
    lastModified: dateTime
    status: str
    confidentialityLevel: str
    department: str
    tags: str[]
}

entity ApprovalRequest {
    requestId: str
    documentId: str
    requestedBy: str
    requestDate: dateTime
    approvalType: str
    urgency: str
    justification: text
    deadline: dateTime?
}

entity ReviewComment {
    commentId: str
    documentId: str
    reviewerId: str
    commentDate: dateTime
    section: str
    commentType: str
    comment: text
    status: str
}

entity ApprovalHistory {
    historyId: str
    documentId: str
    approverId: str
    action: str
    actionDate: dateTime
    comments: text?
    previousVersion: str?
}

// Roles in document approval system
role Author {
    permissions: [create_document, request_approval, view_comments]
    description: "Document creator requesting approval"
}

role Reviewer {
    permissions: [review_document, add_comments, request_changes]
    description: "Subject matter expert reviewing document content"
}

role Approver {
    permissions: [approve_document, reject_document, delegate_approval]
    description: "Authority figure who can approve documents"
}

role DepartmentHead extends Approver {
    permissions: [expedite_approval, override_rejection, assign_reviewers]
    description: "Department head with enhanced approval authority"
}

role ComplianceOfficer {
    permissions: [compliance_review, flag_violations, mandate_changes]
    description: "Compliance expert ensuring regulatory adherence"
}

role LegalCounsel {
    permissions: [legal_review, contract_approval, risk_assessment]
    description: "Legal expert for contract and legal document review"
}

role ExecutiveApprover extends DepartmentHead {
    permissions: [executive_approval, policy_override, final_authority]
    description: "Executive with final approval authority"
}

// Main document approval process
process DocumentApproval {
    description: "Comprehensive document approval workflow with multi-level review"
    version: "3.0"

    start ApprovalRequested {
        trigger: "approval_requested"
        data: ApprovalRequest approvalRequest
        condition: "approvalRequest.documentId != null"
    }

    // Initial document validation
    userTask ValidateSubmission {
        assignee: role(Reviewer)
        form: SubmissionValidation Form {
            title: "Validate Document Submission"
            fields: {
                documentTitle: text readonly
                documentType: text readonly
                authorName: text readonly
                submissionComplete: checkbox required
                formatCompliant: checkbox required
                requiredFieldsPresent: checkbox required
                initialAssessment: select required
                validationNotes: textarea
            }
            validation: {
                submissionComplete: required()
                formatCompliant: required()
                requiredFieldsPresent: required()
                initialAssessment: required()
            }
        }
        dueDate: "+1d"
        priority: normal

        onComplete: {
            if (form.initialAssessment == "approved") -> DetermineApprovalPath
            else -> RequestSubmissionCorrections
        }
    }

    // Determine approval path based on document characteristics
    exclusiveGateway DetermineApprovalPath {
        if (approvalRequest.documentType == "contract" || approvalRequest.confidentialityLevel == "high") -> RequireLegalReview
        if (approvalRequest.documentType == "policy" || approvalRequest.documentType == "procedure") -> RequireComplianceReview
        if (approvalRequest.urgency == "critical") -> ExpediteApproval
        defaultFlow -> StandardReview
    }

    // Standard review process
    userTask StandardReview {
        assignee: role(Reviewer)
        candidateGroups: [Reviewer, DepartmentHead]
        priority: normal
        dueDate: "+3d"

        form: StandardReview Form {
            title: "Standard Document Review"
            fields: {
                contentAccuracy: select required
                formatCompliance: select required
                clarityRating: select required
                completenessRating: select required
                recommendedAction: select required
                reviewComments: textarea
                suggestedRevisions: textarea
                confidenceLevelChange: select
            }
            validation: {
                contentAccuracy: required()
                formatCompliance: required()
                recommendedAction: required()
            }
        }

        onComplete: {
            if (form.recommendedAction == "approve") -> ManagerApproval
            if (form.recommendedAction == "approve_with_changes") -> RequestMinorRevisions
            else -> RequestMajorRevisions
        }
    }

    // Legal review for contracts and high-stakes documents
    userTask LegalReview {
        assignee: role(LegalCounsel)
        priority: high
        dueDate: "+2d"

        form: LegalReview Form {
            title: "Legal Review and Risk Assessment"
            fields: {
                legalCompliance: select required
                contractTermsReview: select required
                liabilityAssessment: select required
                riskLevel: select required
                legalRecommendation: select required
                legalComments: textarea required
                requiredLegalChanges: textarea
                alternativeApproach: textarea
            }
            validation: {
                legalCompliance: required()
                riskLevel: required()
                legalRecommendation: required()
                legalComments: required()
            }
        }

        onComplete: {
            if (form.legalRecommendation == "approve") -> ManagerApproval
            if (form.legalRecommendation == "approve_with_changes") -> RequestLegalRevisions
            else -> RejectForLegalIssues
        }
    }

    // Compliance review for policies and procedures
    userTask ComplianceReview {
        assignee: role(ComplianceOfficer)
        priority: high
        dueDate: "+2d"

        form: ComplianceReview Form {
            title: "Compliance and Regulatory Review"
            fields: {
                regulatoryCompliance: select required
                industryStandards: select required
                internalPolicyAlignment: select required
                complianceRisk: select required
                complianceRecommendation: select required
                complianceNotes: textarea required
                requiredComplianceChanges: textarea
                regulatoryConsiderations: textarea
            }
        }

        onComplete: {
            if (form.complianceRecommendation == "approve") -> ManagerApproval
            else -> RequestComplianceRevisions
        }
    }

    // Expedited approval for critical documents
    userTask ExpediteApproval {
        assignee: role(DepartmentHead)
        priority: critical
        dueDate: "+4h"

        form: ExpeditedApproval Form {
            title: "Expedited Document Approval"
            fields: {
                urgencyJustification: textarea readonly
                quickReviewComplete: checkbox required
                criticalIssuesFound: checkbox
                expeditedDecision: select required
                expeditedComments: textarea
                followUpRequired: checkbox
            }
            validation: {
                quickReviewComplete: required()
                expeditedDecision: required()
            }
        }

        onComplete: {
            if (form.expeditedDecision == "approve") -> ExecutiveNotification
            else -> StandardReview
        }
    }

    // Manager/Department Head approval
    userTask ManagerApproval {
        assignee: role(DepartmentHead)
        priority: normal
        dueDate: "+2d"

        form: ManagerApproval Form {
            title: "Manager Approval Review"
            fields: {
                reviewSummary: textarea readonly
                businessAlignment: select required
                resourceImpact: select required
                strategicImportance: select required
                finalRecommendation: select required
                managerComments: textarea
                implementationNotes: textarea
                escalationRequired: checkbox
            }
        }

        onComplete: {
            if (form.finalRecommendation == "approve" && form.escalationRequired == false) -> DocumentApproved
            if (form.finalRecommendation == "approve" && form.escalationRequired == true) -> ExecutiveApproval
            else -> RequestManagerRevisions
        }
    }

    // Executive approval for high-impact documents
    userTask ExecutiveApproval {
        assignee: role(ExecutiveApprover)
        priority: high
        dueDate: "+1d"

        form: ExecutiveApproval Form {
            title: "Executive Level Approval"
            fields: {
                strategicAlignment: select required
                organizationalImpact: select required
                financialImplications: select required
                executiveDecision: select required
                executiveDirectives: textarea
                implementationTimeline: date
                successMetrics: textarea
            }
        }

        onComplete: {
            if (form.executiveDecision == "approve") -> DocumentApproved
            else -> ExecutiveRejection
        }
    }

    // Handle various revision requests
    userTask RequestMinorRevisions {
        assignee: expression("approvalRequest.requestedBy")
        candidateGroups: [Author]
        priority: normal
        dueDate: "+2d"

        form: MinorRevision Form {
            title: "Address Minor Revision Requests"
            fields: {
                revisionRequests: textarea readonly
                revisionsCompleted: checkbox required
                revisionSummary: textarea required
                versionNumber: text required
                resubmissionReady: checkbox required
            }
        }

        onComplete: -> StandardReview
    }

    userTask RequestMajorRevisions {
        assignee: expression("approvalRequest.requestedBy")
        candidateGroups: [Author]
        priority: high
        dueDate: "+5d"

        form: MajorRevision Form {
            title: "Address Major Revision Requests"
            fields: {
                majorRevisionRequests: textarea readonly
                substantiveChanges: textarea required
                expertConsultation: checkbox
                additionalResearch: checkbox
                revisionsCompleted: checkbox required
                significantChangesNote: textarea
            }
        }

        onComplete: -> ValidateSubmission
    }

    // Parallel process: Track and notify stakeholders
    parallelGateway SplitNotification

    serviceTask NotifyStakeholders {
        implementation: "NotificationService.notifyApprovalProgress"
        input: approvalRequest
        output: notificationResult

        onSuccess -> StakeholdersNotified
        onFailure -> NotificationFailed
    }

    serviceTask UpdateDocumentStatus {
        implementation: "DocumentService.updateStatus"
        input: approvalRequest
        output: statusUpdate

        onSuccess -> StatusUpdated
        onFailure -> StatusUpdateFailed
    }

    parallelGateway JoinNotification

    // Escalation handling
    intermediate EscalationTimer {
        type: timer
        timeout: 172800000  // 48 hours
        condition: "task.dueDate < now()"
    }

    userTask HandleEscalation {
        assignee: role(DepartmentHead)
        priority: critical

        form: Escalation Form {
            title: "Handle Approval Escalation"
            fields: {
                delayReason: textarea required
                escalationAction: select required
                newAssignee: select
                revisedDeadline: datetime
                stakeholderNotification: checkbox required
            }
        }

        onComplete: {
            if (form.escalationAction == "reassign") -> ManagerApproval
            if (form.escalationAction == "expedite") -> ExpediteApproval
            else -> DocumentRejected
        }
    }

    // Final outcomes
    end DocumentApproved {
        condition: "approval_granted"
        actions: {
            sendNotification(approvalRequest.requestedBy, "Document approved successfully")
            updateEntity("Document", "status", "APPROVED")
            updateEntity("ApprovalRequest", "status", "COMPLETED")
            callService("DocumentService", "publishDocument", approvalRequest.documentId)
            executeScript("approval_metrics.js")
        }
    }

    end DocumentRejected {
        condition: "approval_denied"
        actions: {
            sendNotification(approvalRequest.requestedBy, "Document approval rejected")
            updateEntity("Document", "status", "REJECTED")
            updateEntity("ApprovalRequest", "status", "REJECTED")
            callService("DocumentService", "archiveDocument", approvalRequest.documentId)
        }
    }

    end RequestSubmissionCorreections {
        actions: {
            sendNotification(approvalRequest.requestedBy, "Submission corrections required")
            updateEntity("ApprovalRequest", "status", "CORRECTIONS_REQUIRED")
        }
    }

    end RejectForLegalIssues {
        actions: {
            sendNotification(approvalRequest.requestedBy, "Document rejected due to legal issues")
            sendNotification("legal@company.com", "Document requires legal attention")
            updateEntity("Document", "status", "LEGAL_REJECTION")
        }
    }

    end ExecutiveRejection {
        actions: {
            sendNotification(approvalRequest.requestedBy, "Document rejected at executive level")
            updateEntity("Document", "status", "EXECUTIVE_REJECTION")
            callService("DocumentService", "recordExecutiveDecision", approvalRequest.documentId)
        }
    }

    end ExecutiveNotification {
        actions: {
            sendNotification("executives@company.com", "Document approved via expedited process")
            updateEntity("Document", "status", "EXPEDITED_APPROVAL")
        }
    }

    // Intermediate states
    end RequestLegalRevisions {
        actions: {
            startProcess(RevisionProcess, approvalRequest.documentId)
        }
    }

    end RequestComplianceRevisions {
        actions: {
            startProcess(RevisionProcess, approvalRequest.documentId)
        }
    }

    end RequestManagerRevisions {
        actions: {
            startProcess(RevisionProcess, approvalRequest.documentId)
        }
    }

    end StakeholdersNotified {
        actions: {
            updateEntity("ApprovalRequest", "stakeholdersNotified", "true")
        }
    }

    end StatusUpdated {
        actions: {
            updateEntity("Document", "lastStatusUpdate", "now()")
        }
    }

    end NotificationFailed {
        actions: {
            sendNotification("admin@company.com", "Stakeholder notification failed")
        }
    }

    end StatusUpdateFailed {
        actions: {
            sendNotification("admin@company.com", "Document status update failed")
        }
    }
}

// Revision tracking process
process RevisionProcess {
    description: "Track document revisions and re-submissions"

    start RevisionRequested {
        trigger: "revision_requested"
        data: str documentId
    }

    userTask TrackRevisions {
        assignee: expression("getDocumentAuthor(documentId)")
        form: RevisionTracking Form {
            title: "Track Document Revisions"
            fields: {
                revisionsPending: textarea readonly
                progressUpdate: textarea required
                estimatedCompletion: date required
                helpNeeded: checkbox
                revisionsComplete: checkbox
            }
        }

        onComplete: {
            if (form.revisionsComplete == true) -> ResubmitForApproval
            else -> ContinueRevisions
        }
    }

    end ResubmitForApproval {
        actions: {
            startProcess(DocumentApproval, documentId)
        }
    }

    end ContinueRevisions {
        actions: {
            updateEntity("Document", "revisionStatus", "IN_PROGRESS")
        }
    }
}

// Document approval dashboard
dashboard DocumentApprovalDashboard {
    title: "Document Approval Management"
    description: "Monitor and manage document approval workflows"

    widgets: {
        pendingApprovals: processInstanceList {
            title: "Pending Approvals"
            filter: "status == 'RUNNING'"
            columns: ["documentTitle", "author", "documentType", "currentApprover", "daysInProcess", "urgency"]
            actions: [view, expedite, reassign]
        }

        myApprovalTasks: taskList {
            title: "My Approval Tasks"
            filter: "assignee == currentUser AND processType == 'DocumentApproval'"
            groupBy: "priority"
            actions: [complete, delegate, claim]
        }

        approvalMetrics: metrics {
            title: "Approval Process Metrics"
            charts: [
                averageProcessTime,
                approvalsByType,
                bottleneckAnalysis,
                rejectionReasons
            ]
        }

        departmentWorkload: chart DepartmentApprovals {
            type: donut
            title: "Approval Workload by Department"
            dataSource: "SELECT department, COUNT(*) FROM pending_approvals GROUP BY department"
            xAxis: "department"
            yAxis: "count"
        }

        approvalTrends: chart ApprovalTrends {
            type: line
            title: "Monthly Approval Trends"
            dataSource: "SELECT month, approved_count, rejected_count FROM approval_trends ORDER BY month"
            xAxis: "month"
            yAxis: "count"
        }
    }
}