// Employee Onboarding Process Example
// Demonstrates HR workflow with document management and approval chains

project {
    name: "EmployeeOnboardingSystem"
    description: "Comprehensive employee onboarding and setup workflow"
    version: "1.2"
    author: "HR Department"
}

// HR and employee entities
entity Employee {
    employeeId: str
    firstName: str
    lastName: str
    email: email
    phoneNumber: phone
    startDate: date
    position: str
    department: str
    salary: decimal
    managerId: str?
    status: str
}

entity OnboardingDocument {
    documentId: str
    employeeId: str
    documentType: str
    status: str
    uploadDate: dateTime
    reviewedBy: str?
    reviewDate: dateTime?
    notes: text?
}

entity Equipment {
    equipmentId: str
    type: str
    brand: str
    model: str
    serialNumber: str
    assignedTo: str?
    status: str
    assignmentDate: dateTime?
}

entity WorkspaceSetup {
    setupId: str
    employeeId: str
    deskLocation: str
    phoneExtension: str?
    parkingSpot: str?
    accessCards: str[]
    completedDate: dateTime?
}

// Roles in HR onboarding process
role HRCoordinator {
    permissions: [create_employee, review_documents, assign_equipment]
    description: "HR team member coordinating onboarding"
}

role ITSupport {
    permissions: [setup_accounts, configure_equipment, grant_access]
    description: "IT team member handling technical setup"
}

role DirectManager {
    permissions: [approve_employee, set_goals, assign_buddy]
    description: "Employee's direct supervisor"
}

role FacilitiesTeam {
    permissions: [assign_workspace, setup_desk, manage_parking]
    description: "Facilities team handling physical workspace"
}

role NewEmployee {
    permissions: [upload_documents, complete_forms, view_progress]
    description: "The new employee being onboarded"
}

role Buddy {
    permissions: [guide_employee, answer_questions, provide_feedback]
    description: "Experienced employee assigned as a buddy"
}

// Main onboarding process
process EmployeeOnboarding {
    description: "Complete employee onboarding from offer acceptance to first day"
    version: "2.0"

    start OnboardingInitiated {
        trigger: "offer_accepted"
        data: Employee newEmployee
        condition: "newEmployee.startDate >= today()"
    }

    // HR initiates onboarding checklist
    userTask InitiateOnboarding {
        assignee: role(HRCoordinator)
        priority: high
        dueDate: "newEmployee.startDate - 5d"

        form: OnboardingInitiationForm {
            title: "Initiate Employee Onboarding"
            fields: {
                employeeName: text readonly
                startDate: date readonly
                position: text readonly
                department: text readonly
                managerAssigned: select required
                buddyAssigned: select
                onboardingPackage: multiselect required
                specialRequirements: textarea
            }
            validation: {
                managerAssigned: required()
                onboardingPackage: required()
            }
        }

        onComplete: -> CreateEmployeeRecord
    }

    // Create employee record in system
    serviceTask CreateEmployeeRecord {
        implementation: "HRService.createEmployeeRecord"
        input: newEmployee
        output: employeeRecord
        retryCount: 2

        onSuccess -> SendWelcomePackage
        onFailure -> RecordCreationFailed
    }

    // Send welcome package to new employee
    serviceTask SendWelcomePackage {
        implementation: "CommunicationService.sendWelcomeEmail"
        input: employeeRecord
        output: welcomeResult

        onSuccess -> SplitPreparationTasks
        onFailure -> WelcomeEmailFailed
    }

    // Split into parallel preparation tasks
    parallelGateway SplitPreparationTasks

    // HR document collection track
    userTask CollectDocuments {
        assignee: expression("employeeRecord.email")
        candidateGroups: [NewEmployee]
        priority: high
        dueDate: "startDate - 3d"

        form: DocumentCollectionForm {
            title: "Upload Required Documents"
            fields: {
                identification: file required
                taxForms: file required
                bankingInfo: file required
                emergencyContacts: file required
                backgroundCheck: file
                certifications: file
                additionalDocuments: file
            }
            validation: {
                identification: required()
                taxForms: required()
                bankingInfo: required()
                emergencyContacts: required()
            }
        }

        onComplete: -> ReviewDocuments
    }

    // HR reviews submitted documents
    userTask ReviewDocuments {
        assignee: role(HRCoordinator)
        priority: normal

        form: DocumentReviewForm {
            title: "Review Employee Documents"
            fields: {
                employeeName: text readonly
                submittedDocuments: entity readonly
                identificationApproved: checkbox required
                taxFormsApproved: checkbox required
                bankingApproved: checkbox required
                emergencyContactsApproved: checkbox required
                overallApproval: select required
                rejectionReasons: textarea
                additionalRequirements: textarea
            }
        }

        onComplete: {
            if (form.overallApproval == "approved") -> DocumentsApproved
            else -> RequestDocumentCorrections
        }
    }

    // IT setup track
    userTask SetupITAccounts {
        assignee: role(ITSupport)
        priority: normal

        form: ITAccountSetupForm {
            title: "Setup IT Accounts and Access"
            fields: {
                employeeName: text readonly
                department: text readonly
                emailAccountCreated: checkbox required
                networkAccessGranted: checkbox required
                systemPermissions: multiselect required
                softwareLicenses: multiselect
                vpnAccessRequired: checkbox
                mobileDeviceSetup: checkbox
                setupCompleted: checkbox required
            }
            validation: {
                emailAccountCreated: required()
                networkAccessGranted: required()
                systemPermissions: required()
                setupCompleted: required()
            }
        }

        onComplete: -> AssignEquipment
    }

    // Equipment assignment
    userTask AssignEquipment {
        assignee: role(ITSupport)
        priority: normal

        form: EquipmentAssignmentForm {
            title: "Assign Equipment to Employee"
            fields: {
                laptop: select required
                monitor: select
                phone: select
                accessories: multiselect
                equipmentCondition: text readonly
                assignmentNotes: textarea
                deliveryLocation: select required
                setupRequired: checkbox
            }
        }

        onComplete: -> ITSetupComplete
    }

    // Facilities setup track
    userTask PrepareWorkspace {
        assignee: role(FacilitiesTeam)
        priority: normal

        form: WorkspacePreparationForm {
            title: "Prepare Employee Workspace"
            fields: {
                employeeName: text readonly
                department: text readonly
                deskAssignment: select required
                phoneExtension: text
                parkingSpotAssigned: select
                accessCardIssued: checkbox required
                deskSetupComplete: checkbox required
                welcomeItemsPlaced: checkbox
                facilitiesComplete: checkbox required
            }
        }

        onComplete: -> WorkspaceReady
    }

    // Manager preparation track
    userTask ManagerPreparation {
        assignee: expression("employeeRecord.managerId")
        candidateGroups: [DirectManager]
        priority: high

        form: ManagerPreparationForm {
            title: "Prepare for New Team Member"
            fields: {
                employeeName: text readonly
                startDate: date readonly
                firstDaySchedule: textarea required
                teamIntroductionPlanned: checkbox required
                initialGoalsSet: checkbox required
                trainingPlanCreated: checkbox required
                buddyAssigned: select
                firstWeekMeetings: textarea
            }
        }

        onComplete: -> ManagerReady
    }

    // Join all preparation tracks
    parallelGateway JoinPreparationTasks {
        joinType: all
    }

    // Final preparation check
    userTask FinalPreparationCheck {
        assignee: role(HRCoordinator)
        priority: high
        dueDate: "startDate - 1d"

        form: FinalCheckForm {
            title: "Final Onboarding Preparation Check"
            fields: {
                employeeName: text readonly
                startDate: date readonly
                documentsComplete: checkbox readonly
                itSetupComplete: checkbox readonly
                workspaceReady: checkbox readonly
                managerReady: checkbox readonly
                onboardingScheduleSent: checkbox required
                firstDayContactInfo: text required
                allPreparationsComplete: checkbox required
            }
        }

        onComplete: {
            if (form.allPreparationsComplete == true) -> ReadyForFirstDay
            else -> ResolvePendingIssues
        }
    }

    // Handle any remaining issues
    userTask ResolvePendingIssues {
        assignee: role(HRCoordinator)
        priority: critical

        form: IssueResolutionForm {
            title: "Resolve Pending Onboarding Issues"
            fields: {
                pendingIssues: textarea required
                resolutionPlan: textarea required
                revisedStartDate: date
                stakeholdersNotified: checkbox required
                issuesResolved: checkbox required
            }
        }

        onComplete: {
            if (form.issuesResolved == true) -> ReadyForFirstDay
            else -> EscalateIssues
        }
    }

    // Escalate unresolved issues
    end EscalateIssues {
        condition: "issues_unresolved"
        actions: {
            sendNotification("hr-manager@company.com", "Onboarding issues require escalation")
            updateEntity("Employee", "status", "ONBOARDING_DELAYED")
            callService("NotificationService", "alertStakeholders", newEmployee.employeeId)
        }
    }

    // Ready for first day
    intermediate ReadyForFirstDay {
        type: timer
        condition: "date == startDate"
        timeout: 86400000  // Wait until start date
    }

    // First day activities
    userTask FirstDayWelcome {
        assignee: expression("employeeRecord.managerId")
        priority: critical
        dueDate: "startDate + 2h"

        form: FirstDayForm {
            title: "First Day Welcome Activities"
            fields: {
                employeeArrived: checkbox required
                officeOrientation: checkbox required
                teamIntroductions: checkbox required
                systemAccessVerified: checkbox required
                firstDayScheduleCompleted: checkbox required
                employeeFeedback: textarea
                managerNotes: textarea
            }
        }

        onComplete: -> ScheduleFirstWeekActivities
    }

    // Schedule ongoing activities
    serviceTask ScheduleFirstWeekActivities {
        implementation: "CalendarService.scheduleOnboardingActivities"
        input: employeeRecord
        output: schedulingResult

        onSuccess -> OnboardingCompleted
        onFailure -> SchedulingFailed
    }

    // Successful completion
    end OnboardingCompleted {
        condition: "first_day_complete"
        actions: {
            sendNotification(newEmployee.email, "Welcome to the team! Your onboarding is complete.")
            updateEntity("Employee", "status", "ACTIVE")
            callService("HRService", "recordOnboardingSuccess", newEmployee.employeeId)
            startProcess(FirstWeekFollowUp, newEmployee.employeeId)
        }
    }

    // Handle various failure scenarios
    end RecordCreationFailed {
        actions: {
            sendNotification("hr-admin@company.com", "Employee record creation failed")
            updateEntity("Employee", "status", "SETUP_FAILED")
        }
    }

    end DocumentsApproved {
        actions: {
            updateEntity("OnboardingDocument", "status", "APPROVED")
        }
    }

    end RequestDocumentCorrections {
        actions: {
            sendNotification(newEmployee.email, "Document corrections required")
            startProcess(DocumentCorrectionProcess, newEmployee.employeeId)
        }
    }

    end ITSetupComplete {
        actions: {
            updateEntity("Employee", "itSetupStatus", "COMPLETE")
        }
    }

    end WorkspaceReady {
        actions: {
            updateEntity("WorkspaceSetup", "status", "READY")
        }
    }

    end ManagerReady {
        actions: {
            updateEntity("Employee", "managerPrepStatus", "COMPLETE")
        }
    }

    end WelcomeEmailFailed {
        actions: {
            sendNotification("hr-coordinator@company.com", "Welcome email delivery failed")
        }
    }

    end SchedulingFailed {
        actions: {
            sendNotification("hr-coordinator@company.com", "First week scheduling failed")
        }
    }
}

// Follow-up process for first week
process FirstWeekFollowUp {
    description: "First week check-ins and adjustments"

    start FirstWeekStarted {
        trigger: "first_week_initiated"
        data: str employeeId
    }

    // Mid-week check-in
    intermediate MidWeekCheck {
        type: timer
        timeout: 259200000  // 3 days
    }

    userTask MidWeekCheckIn {
        assignee: expression("getManagerForEmployee(employeeId)")
        form: MidWeekCheckForm {
            title: "Mid-Week Check-In"
            fields: {
                employeeProgress: select required
                questionsAnswered: checkbox
                trainingOnTrack: checkbox
                systemAccessIssues: textarea
                additionalSupport: textarea
                employeeFeedback: textarea
            }
        }
        onComplete: -> EndOfWeekCheckIn
    }

    // End of week review
    userTask EndOfWeekCheckIn {
        assignee: expression("getManagerForEmployee(employeeId)")
        form: EndOfWeekForm {
            title: "End of First Week Review"
            fields: {
                goalsCompleted: multiselect
                trainingCompleted: checkbox
                teamIntegration: select required
                performanceNotes: textarea
                nextWeekGoals: textarea
                hrFeedback: textarea
                continueOnboarding: checkbox required
            }
        }
        onComplete: -> FirstWeekCompleted
    }

    end FirstWeekCompleted {
        actions: {
            updateEntity("Employee", "firstWeekStatus", "COMPLETED")
            callService("HRService", "scheduleMonthlyCheckins", employeeId)
        }
    }
}

// Dashboard for HR onboarding management
dashboard OnboardingDashboard {
    title: "Employee Onboarding Dashboard"
    description: "Track and manage employee onboarding processes"

    widgets: {
        activeOnboarding: processInstanceList {
            title: "Active Onboarding Processes"
            filter: "status == 'RUNNING'"
            columns: ["employeeName", "startDate", "currentTask", "daysRemaining", "completionPercentage"]
            actions: [view, expedite]
        }

        upcomingStarts: processInstanceList {
            title: "Upcoming Employee Start Dates"
            filter: "startDate BETWEEN today() AND today() + 30"
            columns: ["employeeName", "startDate", "department", "preparationStatus"]
            actions: [view, edit]
        }

        pendingTasks: taskList {
            title: "My Onboarding Tasks"
            filter: "processType == 'EmployeeOnboarding'"
            groupBy: "priority"
            actions: [complete, delegate, claim]
        }

        onboardingMetrics: metrics {
            title: "Onboarding Performance"
            charts: [
                averageProcessTime,
                onboardingSuccessRate,
                tasksByDepartment,
                overdueTasks
            ]
        }

        departmentStats: chart DepartmentOnboarding {
            type: bar
            title: "Onboarding by Department"
            dataSource: "SELECT department, COUNT(*) FROM onboarding_processes WHERE status='RUNNING' GROUP BY department"
            xAxis: "department"
            yAxis: "count"
        }
    }
}