import React, { useState } from 'react';
import {
  Button,
  DialogActions,
  DialogContent,
  DialogTitle,
  TextField,
  Typography,
  Box,
  Alert
} from '@mui/material';
import ProcessInstanceService from '../../services/ProcessInstanceService';
import { AvailableTransition, TaskInstance, TaskStatus } from '../../types/types';

interface StateTransitionDialogProps {
  processInstanceId: number;
  transition: AvailableTransition;
  tasks: TaskInstance[];
  onClose: () => void;
}

const StateTransitionDialog: React.FC<StateTransitionDialogProps> = ({
  processInstanceId,
  transition,
  tasks,
  onClose
}) => {
  const [executedBy, setExecutedBy] = useState('');
  const [comments, setComments] = useState('');
  const [error, setError] = useState('');

  // Check if there are incomplete tasks
  const incompleteTasks = tasks.filter(
    task => task.status !== TaskStatus.COMPLETED && task.status !== TaskStatus.CANCELLED
  );
  const hasIncompleteTasks = incompleteTasks.length > 0;

  const handleExecute = () => {
    if (!executedBy.trim()) {
      setError('User ID is required');
      return;
    }

    ProcessInstanceService.executeTransition(
      processInstanceId,
      transition.transitionName,
      {
        executedBy,
        userRole: transition.requiredRole,
        comments: comments || undefined
      }
    )
    .then(() => {
      onClose();
    })
    .catch((err) => {
      setError(err.message || 'Failed to execute transition');
    });
  };

  return (
    <>
      <DialogTitle>Execute Transition: {transition.transitionName}</DialogTitle>
      <DialogContent>
        <Box display="flex" flexDirection="column" gap={2} sx={{ "{{" }}  mt: 1  {{ "}}" }}>
          <Typography variant="body2" color="text.secondary">
            From: <strong>{transition.fromState}</strong> -&gt; To: <strong>{transition.toState}</strong>
          </Typography>
          <Typography variant="body2" color="text.secondary">
            Required Role: <strong>{transition.requiredRole}</strong>
          </Typography>

          {hasIncompleteTasks ? (
            <Alert severity="warning">
              <Typography variant="body2" fontWeight="bold" gutterBottom>
                Cannot execute transition
              </Typography>
              <Typography variant="body2" gutterBottom>
                All tasks must be completed before executing this transition.
              </Typography>
              <Typography variant="body2" fontWeight="bold">
                Incomplete tasks ({incompleteTasks.length}):
              </Typography>
              <ul style={{ "{{" }}  margin: '8px 0', paddingLeft: '20px'  {{ "}}" }}>
                {incompleteTasks.map(task => (
                  <li key={task.id}>
                    <Typography variant="body2">
                      {task.taskName} - <em>{task.status.replace("_", " ")}</em>
                    </Typography>
                  </li>
                ))}
              </ul>
            </Alert>
          ) : (
            <>
              <TextField
                label="User ID"
                value={executedBy}
                onChange={(e) => setExecutedBy(e.target.value)}
                fullWidth
                required
                error={!!error && !executedBy}
                helperText={!!error && !executedBy ? 'User ID is required' : ''}
              />

              <TextField
                label="Comments (optional)"
                value={comments}
                onChange={(e) => setComments(e.target.value)}
                fullWidth
                multiline
                rows={3}
              />

              {error && (
                <Typography color="error" variant="body2">
                  {error}
                </Typography>
              )}
            </>
          )}
        </Box>
      </DialogContent>
      <DialogActions>
        <Button onClick={onClose}>Cancel</Button>
        <Button
          variant="contained"
          color="primary"
          onClick={handleExecute}
          disabled={hasIncompleteTasks}
        >
          Execute
        </Button>
      </DialogActions>
    </>
  );
};

export default StateTransitionDialog;
