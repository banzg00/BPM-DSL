import React, { useEffect, useState } from 'react';
import {
  Timeline,
  TimelineItem,
  TimelineSeparator,
  TimelineConnector,
  TimelineContent,
  TimelineDot,
  TimelineOppositeContent
} from '@mui/lab';
import { Typography, Paper, CircularProgress, Alert } from '@mui/material';
import ProcessInstanceService from '../../services/ProcessInstanceService';
import { TransitionHistory } from '../../types/types';

interface ProcessTimelineProps {
  processInstanceId: number;
}

const ProcessTimeline: React.FC<ProcessTimelineProps> = ({ processInstanceId }) => {
  const [history, setHistory] = useState<TransitionHistory[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    setLoading(true);
    setError(null);
    ProcessInstanceService.getProcessHistory(processInstanceId)
      .then((data) => {
        setHistory(data);
        setLoading(false);
      })
      .catch((err) => {
        console.error('Failed to load process history:', err);
        setError('Failed to load process history');
        setLoading(false);
      });
  }, [processInstanceId]);

  if (loading) {
    return (
      <div style={{ "{{" }} display: 'flex', justifyContent: 'center', padding: '20px' {{ "}}" }}>
        <CircularProgress />
      </div>
    );
  }

  if (error) {
    return (
      <Alert severity="error">{error}</Alert>
    );
  }

  if (history.length === 0) {
    return (
      <Typography variant="body2" color="text.secondary">
        No history available
      </Typography>
    );
  }

  return (
    <Timeline position="alternate">
      {history.map((item, index) => (
        <TimelineItem key={item.id}>
          <TimelineOppositeContent color="text.secondary">
            {new Date(item.executedAt).toLocaleString()}
          </TimelineOppositeContent>
          <TimelineSeparator>
            <TimelineDot color="primary" />
            {index < history.length - 1 && <TimelineConnector />}
          </TimelineSeparator>
          <TimelineContent>
            <Paper elevation={3} sx={{ "{{" }}  p: 2  {{ "}}" }}>
              <Typography variant="h6" component="h3">
                {item.transitionName}
              </Typography>
              <Typography variant="body2">
                {item.fromState} -&gt; {item.toState}
              </Typography>
              <Typography variant="caption" color="text.secondary">
                By: {item.executedBy}
                {item.executedByRole && ` (${item.executedByRole})`}
              </Typography>
            </Paper>
          </TimelineContent>
        </TimelineItem>
      ))}
    </Timeline>
  );
};

export default ProcessTimeline;
