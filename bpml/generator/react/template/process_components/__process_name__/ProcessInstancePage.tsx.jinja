import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import {
  Container,
  Typography,
  Button,
  Paper,
  Box,
  Grid,
  Chip,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField
} from '@mui/material';
import ProcessInstanceService from '../../../services/ProcessInstanceService';
import TaskService from '../../../services/TaskService';
import { ProcessInstance, ProcessStatus, TaskInstance, TaskStatus, AvailableTransition } from '../../../types/types';
import ProcessTimeline from '../../shared/ProcessTimeline';
import StateTransitionDialog from '../../shared/StateTransitionDialog';

const ProcessInstancePage: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [instance, setInstance] = useState<ProcessInstance | null>(null);
  const [tasks, setTasks] = useState<TaskInstance[]>([]);
  const [availableTransitions, setAvailableTransitions] = useState<AvailableTransition[]>([]);
  const [isTransitionDialogOpen, setIsTransitionDialogOpen] = useState(false);
  const [selectedTransition, setSelectedTransition] = useState<AvailableTransition | null>(null);
  const [isSuspendDialogOpen, setIsSuspendDialogOpen] = useState(false);
  const [isTerminateDialogOpen, setIsTerminateDialogOpen] = useState(false);
  const [suspendReason, setSuspendReason] = useState('');
  const [terminateReason, setTerminateReason] = useState('');
  const [historyRefreshKey, setHistoryRefreshKey] = useState(0);

  useEffect(() => {
    if (id) {
      loadData();
    }
  }, [id]);

  const loadData = () => {
    const instanceId = parseInt(id!);

    ProcessInstanceService.getById(instanceId).then((data) => {
      setInstance(data);
    });

    TaskService.getByProcessInstance(instanceId).then((data) => {
      setTasks(data);
    });

    ProcessInstanceService.getAvailableTransitions(instanceId).then((data) => {
      setAvailableTransitions(data);
    });
  };

  const handleExecuteTransition = (transition: AvailableTransition) => {
    setSelectedTransition(transition);
    setIsTransitionDialogOpen(true);
  };

  const handleTransitionDialogClose = () => {
    setIsTransitionDialogOpen(false);
    loadData();
    setHistoryRefreshKey(prev => prev + 1);
  };

  const handleBack = () => {
    navigate('/process/{{ process_name_lower }}/instances');
  };

  const handleSuspend = () => {
    setIsSuspendDialogOpen(true);
  };

  const handleConfirmSuspend = () => {
    if (suspendReason && instance) {
      ProcessInstanceService.suspendProcess(instance.id, suspendReason, 'current-user')
        .then(() => {
          setIsSuspendDialogOpen(false);
          setSuspendReason('');
          loadData();
          setHistoryRefreshKey(prev => prev + 1);
        })
        .catch(error => {
          console.error('Failed to suspend process:', error);
          alert('Failed to suspend process: ' + error.message);
        });
    }
  };

  const handleResume = () => {
    if (instance) {
      ProcessInstanceService.resumeProcess(instance.id, 'current-user')
        .then(() => {
          loadData();
          setHistoryRefreshKey(prev => prev + 1);
        })
        .catch(error => {
          console.error('Failed to resume process:', error);
          alert('Failed to resume process: ' + error.message);
        });
    }
  };

  const handleTerminate = () => {
    setIsTerminateDialogOpen(true);
  };

  const handleConfirmTerminate = () => {
    if (terminateReason && instance) {
      ProcessInstanceService.terminateProcess(instance.id, terminateReason, 'current-user')
        .then(() => {
          setIsTerminateDialogOpen(false);
          setTerminateReason('');
          loadData();
          setHistoryRefreshKey(prev => prev + 1);
        })
        .catch(error => {
          console.error('Failed to terminate process:', error);
          alert('Failed to terminate process: ' + error.message);
        });
    }
  };

  const getStatusColor = (status: ProcessStatus) => {
    switch (status) {
      case ProcessStatus.RUNNING:
        return 'primary';
      case ProcessStatus.COMPLETED:
        return 'success';
      case ProcessStatus.TERMINATED:
        return 'error';
      case ProcessStatus.SUSPENDED:
        return 'warning';
      default:
        return 'default';
    }
  };

  const getTaskStatusColor = (status: TaskStatus) => {
    switch (status) {
      case TaskStatus.PENDING:
        return 'warning';
      case TaskStatus.CLAIMED:
        return 'info';
      case TaskStatus.COMPLETED:
        return 'success';
      case TaskStatus.CANCELLED:
        return 'error';
      default:
        return 'default';
    }
  };

  // Format names like "SendToManagerTransition" or "SENDTOMANAGERTRANSITION" to "Send To Manager Transition"
  const formatName = (name: string): string => {
    if (!name) return '';

    // Remove common suffixes
    let formatted = name.replace(/(Transition|State)$/i, '');

    // Add spaces before capital letters or split on underscores
    formatted = formatted
      .replace(/([a-z])([A-Z])/g, '$1 $2')  // camelCase
      .replace(/([A-Z]+)([A-Z][a-z])/g, '$1 $2')  // ABCDef -> ABC Def
      .replace(/_/g, ' ')  // snake_case
      .trim();

    // Capitalize first letter of each word
    return formatted
      .split(' ')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
      .join(' ');
  };

  if (!instance) {
    return <Container><Typography>Loading...</Typography></Container>;
  }

  return (
    <Container maxWidth="lg" sx={{ "{{" }}  mt: 4  {{ "}}" }}>
      <Paper sx={{ "{{" }}  p: 3  {{ "}}" }}>
        <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
          <Typography variant="h4" component="h1">
            Process Instance #{instance.id}
          </Typography>
          <Box display="flex" gap={1}>
            {instance.status === ProcessStatus.RUNNING && (
              <>
                <Button onClick={handleSuspend} variant="outlined" color="warning">
                  Suspend
                </Button>
                <Button onClick={handleTerminate} variant="outlined" color="error">
                  Terminate
                </Button>
              </>
            )}
            {instance.status === ProcessStatus.SUSPENDED && (
              <Button onClick={handleResume} variant="contained" color="primary">
                Resume
              </Button>
            )}
            <Button onClick={handleBack}>
              Back to List
            </Button>
          </Box>
        </Box>

        <Grid container spacing={3}>
          {/* Instance Details */}
          <Grid item xs={12} md={6}>
            <Typography variant="h6" gutterBottom>
              Details
            </Typography>
            <Box display="flex" flexDirection="column" gap={2}>
              <Box>
                <Typography variant="subtitle2" color="text.secondary">
                  Current State
                </Typography>
                <Typography variant="body1">
                  {formatName(instance.currentState)}
                </Typography>
              </Box>
              <Box>
                <Typography variant="subtitle2" color="text.secondary">
                  Status
                </Typography>
                <Chip
                  label={instance.status}
                  color={getStatusColor(instance.status)}
                  size="small"
                />
              </Box>
              <Box>
                <Typography variant="subtitle2" color="text.secondary">
                  Initiated By
                </Typography>
                <Typography variant="body1">
                  {instance.initiatedBy}
                </Typography>
              </Box>
              {/* Show linked entity if available */}
              {instance.processVariables && Object.keys(instance.processVariables).length > 0 && (
                <>
                  {% for entity in entities %}
                  {instance.processVariables.{{ entity.name | lower }}Id && (
                    <Box>
                      <Typography variant="subtitle2" color="text.secondary">
                        Related {{ entity.name }}
                      </Typography>
                      <Button
                        variant="text"
                        size="small"
                        onClick={() => navigate(`/{{ entity.name | lower }}/${instance.processVariables.{{ entity.name | lower }}Id}`)}
                        sx={{ "{{" }}  justifyContent: 'flex-start', p: 0, textTransform: 'none'  {{ "}}" }}
                      >
                        {{ entity.name }} #{instance.processVariables.{{ entity.name | lower }}Id}
                      </Button>
                    </Box>
                  )}
                  {% endfor %}
                </>
              )}
              <Box>
                <Typography variant="subtitle2" color="text.secondary">
                  Started At
                </Typography>
                <Typography variant="body1">
                  {new Date(instance.startedAt).toLocaleString()}
                </Typography>
              </Box>
              {instance.status === ProcessStatus.SUSPENDED && (
                <>
                  <Box>
                    <Typography variant="subtitle2" color="text.secondary">
                      Suspended At
                    </Typography>
                    <Typography variant="body1">
                      {new Date(instance?.suspendedAt || "").toLocaleString() ||
                        "N/A"}
                    </Typography>
                  </Box>
                  <Box>
                    <Typography variant="subtitle2" color="text.secondary">
                      Suspended Reason
                    </Typography>
                    <Typography variant="body1">
                      {instance.suspendedReason || "N/A"}
                    </Typography>
                  </Box>
                </>
              )}
              {instance.status === ProcessStatus.COMPLETED && (
                <Box>
                  {instance.status === ProcessStatus.COMPLETED && (
                    <Typography variant="subtitle2" color="text.secondary">
                      Completed At
                    </Typography>
                  )}
                  <Typography variant="body1">
                    {new Date(instance?.completedAt || "").toLocaleString() ||
                      "N/A"}
                  </Typography>
                </Box>
              )}
              {instance.status === ProcessStatus.TERMINATED && (
                <>
                  <Box>
                    <Typography variant="subtitle2" color="text.secondary">
                      Terminated At
                    </Typography>
                    <Typography variant="body1">
                      {new Date(instance?.completedAt || "").toLocaleString() ||
                        "N/A"}
                    </Typography>
                  </Box>
                  <Box>
                    <Typography variant="subtitle2" color="text.secondary">
                      Terminated Reason
                    </Typography>
                    <Typography variant="body1">
                      {instance.terminatedReason || "N/A"}
                    </Typography>
                  </Box>
                </>
              )}
            </Box>
          </Grid>

          {/* Available Transitions */}
          <Grid item xs={12} md={6}>
            <Typography variant="h6" gutterBottom>
              Available Transitions
            </Typography>
            <Box display="flex" flexDirection="column" gap={1}>
              {availableTransitions.length === 0 ? (
                <Typography variant="body2" color="text.secondary">
                  No transitions available
                </Typography>
              ) : (
                availableTransitions.map((transition) => (
                  <Button
                    key={transition.transitionName}
                    variant="outlined"
                    onClick={() => handleExecuteTransition(transition)}
                  >
                    {formatName(transition.transitionName)} (
                    {formatName(transition.fromState)} &rarr;{" "}
                    {formatName(transition.toState)})
                  </Button>
                ))
              )}
            </Box>
          </Grid>

          {/* Tasks */}
          <Grid item xs={12}>
            <Typography variant="h6" gutterBottom>
              Tasks
            </Typography>
            {tasks.length === 0 ? (
              <Typography variant="body2" color="text.secondary">
                No tasks found
              </Typography>
            ) : (
              <Box 
                display="flex"
                flexDirection="column"
                gap={1}
                sx={{ "{{" }} overflowY: "auto", maxHeight: "320px" {{ "}}" }}
              >
                {tasks.map((task) => (
                  <Box
                    key={task.id}
                    sx={{ "{{" }}  p: 2, border: '1px solid #e0e0e0', borderRadius: 1  {{ "}}" }}
                  >
                    <Typography variant="body1">
                      {task.taskName}
                    </Typography>
                    <Box display="flex" gap={2} mt={1}>
                      <Chip label={task.status} color={getTaskStatusColor(task.status)} size="small" />
                      <Typography variant="caption" color="text.secondary">
                        Role: {task.assignedRole}
                      </Typography>
                      {task.assignedUser && (
                        <Typography variant="caption" color="text.secondary">
                          Assigned to: {task.assignedUser}
                        </Typography>
                      )}
                    </Box>
                  </Box>
                ))}
              </Box>
            )}
          </Grid>

          {/* Timeline */}
          <Grid item xs={12}>
            <Typography variant="h6" gutterBottom>
              Process History
            </Typography>
            <ProcessTimeline processInstanceId={parseInt(id!)} refreshKey={historyRefreshKey} />
          </Grid>
        </Grid>
      </Paper>

      {selectedTransition && (
        <Dialog open={isTransitionDialogOpen} onClose={handleTransitionDialogClose} maxWidth="sm" fullWidth>
          <StateTransitionDialog
            processInstanceId={parseInt(id!)}
            transition={selectedTransition}
            onClose={handleTransitionDialogClose}
          />
        </Dialog>
      )}

      {/* Suspend Dialog */}
      <Dialog open={isSuspendDialogOpen} onClose={() => setIsSuspendDialogOpen(false)}>
        <DialogTitle>Suspend Process</DialogTitle>
        <DialogContent>
          <TextField
            autoFocus
            margin="dense"
            label="Reason for suspension"
            fullWidth
            multiline
            rows={3}
            value={suspendReason}
            onChange={(e) => setSuspendReason(e.target.value)}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setIsSuspendDialogOpen(false)}>Cancel</Button>
          <Button onClick={handleConfirmSuspend} disabled={!suspendReason} variant="contained" color="warning">
            Suspend
          </Button>
        </DialogActions>
      </Dialog>

      {/* Terminate Dialog */}
      <Dialog open={isTerminateDialogOpen} onClose={() => setIsTerminateDialogOpen(false)}>
        <DialogTitle>Terminate Process</DialogTitle>
        <DialogContent>
          <TextField
            autoFocus
            margin="dense"
            label="Reason for termination"
            fullWidth
            multiline
            rows={3}
            value={terminateReason}
            onChange={(e) => setTerminateReason(e.target.value)}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setIsTerminateDialogOpen(false)}>Cancel</Button>
          <Button onClick={handleConfirmTerminate} disabled={!terminateReason} variant="contained" color="error">
            Terminate
          </Button>
        </DialogActions>
      </Dialog>
    </Container>
  );
};

export default ProcessInstancePage;
