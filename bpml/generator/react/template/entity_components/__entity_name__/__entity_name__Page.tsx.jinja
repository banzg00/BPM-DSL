import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import {
  Container,
  Typography,
  Button,
  Paper,
  Box,
  Grid,
  Dialog,
  Menu,
  MenuItem
} from '@mui/material';
import {{ entity_name }}Service from '../../services/{{ entity_name }}Service';
import {{ entity_name }}Dialog from './{{ entity_name }}Dialog';
import StartProcessDialog from '../../components/shared/StartProcessDialog';
import { {{ entity_name }} } from '../../types/types';

const {{ entity_name }}Page: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [{{ entity_name_lower }}, set{{ entity_name }}] = useState<{{ entity_name }} | null>(null);
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [processMenuAnchor, setProcessMenuAnchor] = useState<null | HTMLElement>(null);
  const [isStartProcessDialogOpen, setIsStartProcessDialogOpen] = useState(false);
  const [selectedProcess, setSelectedProcess] = useState<string>('');

  useEffect(() => {
    if (id) {
      {{ entity_name }}Service.get{{ entity_name }}ById(parseInt(id)).then((data) => {
        set{{ entity_name }}(data);
      });
    }
  }, [id]);

  const handleEdit = () => {
    setIsDialogOpen(true);
  };

  const handleDialogClose = () => {
    setIsDialogOpen(false);
    if (id) {
      {{ entity_name }}Service.get{{ entity_name }}ById(parseInt(id)).then((data) => {
        set{{ entity_name }}(data);
      });
    }
  };

  const handleDelete = () => {
    if (id && window.confirm('Are you sure you want to delete this {{ entity_name }}?')) {
      {{ entity_name }}Service.delete{{ entity_name }}(Number(id)).then(() => {
        navigate('/{{ entity_name_lower }}');
      });
    }
  };

  const handleBack = () => {
    navigate('/{{ entity_name_lower }}');
  };

  const handleStartProcessClick = (event: React.MouseEvent<HTMLElement>) => {
    setProcessMenuAnchor(event.currentTarget);
  };

  const handleProcessMenuClose = () => {
    setProcessMenuAnchor(null);
  };

  const handleProcessSelect = (processName: string) => {
    setSelectedProcess(processName);
    setProcessMenuAnchor(null);
    setIsStartProcessDialogOpen(true);
  };

  const handleStartProcessDialogClose = () => {
    setIsStartProcessDialogOpen(false);
    setSelectedProcess('');
  };

  // Define which processes can be started for this entity type
  const availableProcesses = [
    {% for process in processes_using_entity %}
    '{{ process.name }}',
    {% endfor %}
  ];

  if (!{{ entity_name_lower }}) {
    return <Container><Typography>Loading...</Typography></Container>;
  }

  return (
    <Container maxWidth="md" sx={{ "{{" }}  mt: 4  {{ "}}" }}>
      <Paper sx={{ "{{" }}  p: 3  {{ "}}" }}>
        <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
          <Typography variant="h4" component="h1">
            {{ entity_name }} Details
          </Typography>
          <Box>
            <Button onClick={handleBack} sx={{ "{{" }}  mr: 1  {{ "}}" }}>
              Back
            </Button>
            {% if processes_using_entity %}
            <Button
              variant="contained"
              color="primary"
              onClick={handleStartProcessClick}
              sx={{ "{{" }}  mr: 1  {{ "}}" }}
            >
              Start Process
            </Button>
            {% endif %}
            <Button variant="outlined" onClick={handleEdit} sx={{ "{{" }}  mr: 1  {{ "}}" }}>
              Edit
            </Button>
            <Button variant="outlined" color="error" onClick={handleDelete}>
              Delete
            </Button>
          </Box>
        </Box>

        <Grid container spacing={2}>
          <Grid item xs={12}>
            <Typography variant="subtitle2" color="text.secondary">
              ID
            </Typography>
            <Typography variant="body1">
              {{'{'}}{{ entity_name_lower }}.id{{'}'}}
            </Typography>
          </Grid>
          {% for attr in attributes %}
          <Grid item xs={12} md={6}>
            <Typography variant="subtitle2" color="text.secondary">
              {{ attr.name | capitalize_str }}
            </Typography>
            <Typography variant="body1">
              {% if attr.type | is_enum_type %}{{'{'}}{{ entity_name_lower }}.{{ attr.name }} || 'N/A'{{'}'}}
              {% else %}{{'{'}}{{ entity_name_lower }}.{{ attr.name }}?.toString() || 'N/A'{{'}'}}
              {% endif %}
            </Typography>
          </Grid>
          {% endfor %}
        </Grid>
      </Paper>

      <Dialog open={isDialogOpen} onClose={handleDialogClose} maxWidth="sm" fullWidth>
        <{{ entity_name }}Dialog id={parseInt(id!)} onClose={handleDialogClose} />
      </Dialog>

      {% if processes_using_entity %}
      {/* Process Selection Menu */}
      <Menu
        anchorEl={processMenuAnchor}
        open={Boolean(processMenuAnchor)}
        onClose={handleProcessMenuClose}
      >
        {availableProcesses.length > 0 ? (
          availableProcesses.map((processName) => (
            <MenuItem key={processName} onClick={() => handleProcessSelect(processName)}>
              {processName}
            </MenuItem>
          ))
        ) : (
          <MenuItem disabled>No processes available</MenuItem>
        )}
      </Menu>

      {/* Start Process Dialog */}
      <Dialog open={isStartProcessDialogOpen} onClose={handleStartProcessDialogClose} maxWidth="sm" fullWidth>
        <StartProcessDialog
          processName={selectedProcess}
          entityId={parseInt(id!)}
          entityType="{{ entity_name }}"
          onClose={handleStartProcessDialogClose}
        />
      </Dialog>
      {% endif %}
    </Container>
  );
};

export default {{ entity_name }}Page;
